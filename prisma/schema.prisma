generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String      @id @default(cuid())
    name          String?
    username      String?     @unique
    customDomain  String?     @unique
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    bio           String?
    headline      String?
    location      String?
    github        String?
    linkedin      String?
    template      Int?
    isPro         Boolean?
    skills        UserSkill[]
    accounts      Account[]
    sessions      Session[]
    projectsId    String?
    Projects      Projects[]
}

model Projects {
    id               String             @id @default(cuid())
    title            String
    description      String?
    icon             String?
    body             String?
    links            String?
    github           String?
    order            Int?
    userId           String
    customButton     String?
    customButtonLink String?
    skills           SkillsOnProjects[]
    user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
}

model Skills {
    id         String             @id @default(cuid())
    name       String             @unique
    createdAt  DateTime           @default(now())
    userSkills UserSkill[]
    projects   SkillsOnProjects[]
}

model SkillsOnProjects {
    skill      Skills   @relation(fields: [skillId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    skillId    String
    project    Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    projectId  String
    assignedAt DateTime @default(now())

    @@id([skillId, projectId])
}

model UserSkill {
    id        String   @id @default(cuid())
    userId    String
    skillId   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    skill     Skills   @relation(fields: [skillId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([userId, skillId])
}
