generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id             String          @id @default(cuid())
    name           String?
    username       String?         @unique
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    bio            String?
    headline       String?
    location       String?
    links          String[]
    projects       Project[]       @relation("UserProjects")
    certifications Certification[]
    skills         Skill[]
    accounts       Account[]
    sessions       Session[]
    Project        Project[]
}

model Project {
    id          String   @id @default(cuid())
    title       String
    description String
    links       String[]
    tags        Tags[]
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    User        User[]   @relation("UserProjects")
}

model Tags {
    id        String   @id @default(cuid())
    name      String
    Project   Project? @relation(fields: [projectId], references: [id])
    projectId String?
}

model Certification {
    id           String   @id @default(cuid())
    name         String
    issuingBody  String
    dateAchieved DateTime
    userId       String
    user         User     @relation(fields: [userId], references: [id])
}

enum SkillLevel {
    Beginner
    Intermediate
    Expert
}

model Skill {
    id     String     @id @default(cuid())
    name   String
    level  SkillLevel
    userId String
    user   User       @relation(fields: [userId], references: [id])
}
