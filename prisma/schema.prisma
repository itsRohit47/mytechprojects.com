generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id             String              @id @default(cuid())
    name           String?
    username       String?             @unique
    email          String?             @unique
    emailVerified  DateTime?
    image          String?
    bio            String?
    headline       String?
    location       String?
    github         String?
    linkedin       String?
    template       Int?
    isPro          Boolean?
    schedulingLink schedulingLink?
    iNeedThis      Int?
    certifications UserCertification[]
    skills         UserSkill[]
    accounts       Account[]
    sessions       Session[]
    education      Education[]
    Experience     Experience[]
    projectsId     String?
    Projects       Projects[]
}

model Experience {
    id          String   @id @default(cuid())
    userId      String
    title       String
    company     String
    companyLogo String?
    companyUrl  String?
    location    String
    startYear   Int
    endYear     Int?
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
    id             String   @id @default(cuid())
    userId         String
    courseName     String?
    fieldOfStudy   String?
    startYear      Int?
    endYear        Int?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    universityName String?
    uniLogo        String?
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model schedulingLink {
    id     String @id @default(cuid())
    link   String
    label  String
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Projects {
    id          String             @id @default(cuid())
    title       String
    description String?
    icon        String?
    body        String?
    links       String?
    userId      String
    skills      SkillsOnProjects[]
    user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
}

model CertificationDefinition {
    id                 String              @id @default(cuid())
    name               String              @unique
    issuer             String
    createdAt          DateTime            @default(now())
    userCertifications UserCertification[]
}

model UserCertification {
    id                      String                    @id @default(cuid())
    name                    String
    issuer                  String
    image                   String
    expiry                  DateTime
    issued                  DateTime
    userId                  String
    user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
    CertificationDefinition CertificationDefinition[]
}

model Skills {
    id         String             @id @default(cuid())
    name       String             @unique
    createdAt  DateTime           @default(now())
    userSkills UserSkill[]
    projects   SkillsOnProjects[]
}

model SkillsOnProjects {
    skill      Skills   @relation(fields: [skillId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    skillId    String
    project    Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    projectId  String
    assignedAt DateTime @default(now())

    @@id([skillId, projectId])
}

model UserSkill {
    id        String   @id @default(cuid())
    userId    String
    skillId   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    skill     Skills   @relation(fields: [skillId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([userId, skillId])
}
